{"version":3,"sources":["../../src/api/controller.js"],"names":["findClosest","cursor","elements","orderedArray","length","closestNum","reduce","prev","curr","Math","abs","position","filtered","filter","el","push","PredictionController","req","res","send","text","params","cursorPosition","lineNum","hints","predictions","data","predictionController"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA,IAAIA,cAAc,SAAdA,WAAc,CAACC,MAAD,EAASC,QAAT,EAAmBC,YAAnB,EAAoC;AACpD,MAAID,SAASE,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAOD,YAAP;AACD;AACD,MAAME,aAAaH,SAASI,MAAT,CAAgB,UAACC,IAAD,EAAOC,IAAP,EAAgB;AACjD,WAAQC,KAAKC,GAAL,CAASF,KAAKG,QAAL,GAAgBV,MAAzB,IAAmCQ,KAAKC,GAAL,CAASH,KAAKI,QAAL,GAAgBV,MAAzB,CAAnC,GAAsEO,IAAtE,GAA6ED,IAArF;AACD,GAFkB,CAAnB;AAGA,MAAMK,WAAWV,SAASW,MAAT,CAAgB,UAACC,EAAD,EAAQ;AAAE,WAAOA,OAAOT,UAAd;AAA2B,GAArD,CAAjB;AACAF,eAAaY,IAAb,CAAkBV,UAAlB;AACA,SAAOL,YAAYC,MAAZ,EAAoBW,QAApB,EAA8BT,YAA9B,CAAP;AACD,CAVD;;IAYMa,oB;;;;;;;6BAEKC,G,EAAKC,G,EAAK;AACjBA,UAAIC,IAAJ,CAAS,OAAT;AACD;;;iCACYF,G,EAAKC,G,EAAK;AACrB,UAAME,OAAOH,IAAII,MAAJ,CAAWD,IAAxB;AACA,UAAME,iBAAiBL,IAAII,MAAJ,CAAWC,cAAlC;AACA,UAAMC,UAAUN,IAAII,MAAJ,CAAWE,OAA3B;AACA,UAAIC,QAAQC,eAAYC,IAAZ,CAAiBN,IAAjB,CAAZ;AACA,UAAII,KAAJ,EAAW;AACT,YAAMrB,eAAe,EAArB;AACAqB,gBAAQxB,YAAYsB,iBAAiBC,OAA7B,EAAsCC,KAAtC,EAA6CrB,YAA7C,CAAR;AACAe,YAAIC,IAAJ,CAASK,KAAT;AACD,OAJD,MAIO;AACLN,YAAIC,IAAJ,CAAS,OAAT;AACD;AACF;;;;;;AAIH,IAAMQ,uBAAuB,IAAIX,oBAAJ,EAA7B;kBACeW,oB","file":"controller.js","sourcesContent":["import predictions from '../../db/Data.json'\r\n\r\nlet findClosest = (cursor, elements, orderedArray) => {\r\n  if (elements.length === 0) {\r\n    return orderedArray;\r\n  }\r\n  const closestNum = elements.reduce((prev, curr) => {\r\n    return (Math.abs(curr.position - cursor) < Math.abs(prev.position - cursor) ? curr : prev);\r\n  });\r\n  const filtered = elements.filter((el) => { return el !== closestNum; });\r\n  orderedArray.push(closestNum);\r\n  return findClosest(cursor, filtered, orderedArray);\r\n};\r\n\r\nclass PredictionController {\r\n\r\n  mainPage(req, res) {\r\n    res.send('hello')\r\n  }\r\n  mainResponse(req, res) {\r\n    const text = req.params.text\r\n    const cursorPosition = req.params.cursorPosition\r\n    const lineNum = req.params.lineNum\r\n    let hints = predictions.data[text]\r\n    if (hints) {\r\n      const orderedArray = [];\r\n      hints = findClosest(cursorPosition * lineNum, hints, orderedArray)\r\n      res.send(hints)\r\n    } else {\r\n      res.send('false')\r\n    }\r\n  }\r\n  \r\n}\r\n\r\nconst predictionController = new PredictionController();\r\nexport default predictionController;\r\n"]}